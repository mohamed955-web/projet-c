#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable:4996)
typedef enum { MAX_ETUDIANTS = 100, NB_LETTRE_MAX = 30, NB_MAX_ABS = 80, NB_CARACTERE = 3, NB_MIN_ETU = 0 } Enregister;

typedef struct {
    char nom[NB_LETTRE_MAX];
    int groupe;
} Etudiant;



void Commande1(Etudiant etudiants[], int* nm_etudiants, char* nom, int groupe) {
    int trouver = 0;
    for (int i = 0; i < *nm_etudiants; i++) {
        if (strcmp(etudiants[i].nom, nom) == 0 && etudiants[i].groupe == groupe) {
            trouver = 1;
            break;
        }
    }

    if (trouver) {
        printf("Nom incorrect\n");
    }
    else {
        strcpy(etudiants[*nm_etudiants].nom, nom);
        etudiants[*nm_etudiants].groupe = groupe;
        (*nm_etudiants)++;
        printf("Inscription enregistree (%d)\n", *nm_etudiants);
    }
}

typedef struct {
    int nm_etudiant;
    int date;
    char demi_journee[3];

} absence;
enum { NB_MIN_DATE = 0, NB_MAX_DATE = 40 };



int trouver_absence(absence tabAbs[], int nb_absences, int nm_etudiant, int date, const char demi_journee[3]) {
    for (int i = 0; i < nb_absences; i++) {
        if (strcmp(tabAbs[i].demi_journee, demi_journee) == 0 && tabAbs[i].nm_etudiant == nm_etudiant && tabAbs[i].date == date) {
            return 1; // Absence trouvée
        }
    }
    return 0; // Absence non trouvée
}

void AbsenceEnregistrer(absence tabAbs[], int* nb_absences, int nm_etudiant, int date, const char demi_journee[3]) {
    if (strcmp(demi_journee, "am") != 0 && strcmp(demi_journee, "pm") != 0) {
        printf("Demi-journee incorrecte\n");
    }
    else if (nm_etudiant <= NB_MIN_ETU || nm_etudiant > MAX_ETUDIANTS) {
        printf("Identifiant incorrect\n");
    }
    else if (date <= NB_MIN_DATE || date > NB_MAX_DATE) {
        printf("Date incorrecte\n");
    }
    else if (trouver_absence(tabAbs, *nb_absences, nm_etudiant, date, demi_journee) == 1) {
        printf("Absence deja connue\n");
    }
    else {
        if (*nb_absences < NB_MAX_ABS) {
            tabAbs[*nb_absences].nm_etudiant = nm_etudiant;
            tabAbs[*nb_absences].date = date;
            strcpy(tabAbs[*nb_absences].demi_journee, demi_journee);
            (*nb_absences)++;
            printf("Absence enregistree [%d]\n", *nb_absences);
        }
    }
}

//C3
int comparerEtudiants(const void* etu1, const void* etu2) {
    const Etudiant* etudiantA = (const Etudiant*)etu1;
    const Etudiant* etudiantB = (const Etudiant*)etu2;
    int comparaisonGroupe = etudiantA->groupe - etudiantB->groupe; //added an intermediate value
    if (comparaisonGroupe != 0) {
        return comparaisonGroupe;
    }
    return strcmp(etudiantA->nom, etudiantB->nom);

}

int calculerAbsences(const absence tabAbs[], int nb_absences, int id_etudiant, int date_limite) {
    int totalAbsences = 0;
    for (int i = 0; i < nb_absences; i++) {
        if (tabAbs[i].id_etudiant == id_etudiant && tabAbs[i].date <= date_limite) { //using date limite to handle totalAbsence
            totalAbsences++;
        }
    }
    return totalAbsences;
}

void liste_etudiant(const char etudiants[], int date_jusquici, int nm_etudiant) {
    if (nm_etudiant <= 0 || nm_etudiant > 100) {
        printf("Aucun inscrit\n");
        return nm_etudiant;
    }
    
    
}

 


    int main() {
        Etudiant etudiants[MAX_ETUDIANTS];
        absence tabAbs[NB_MAX_ABS];
        int nm_etudiants = 0, nb_absences = 0;
        char nom[NB_LETTRE_MAX];
        int groupe, nm_etudiant, date;
        char demi_journee[NB_CARACTERE];
        char cde[NB_LETTRE_MAX] = "";
        do {
            scanf("%s", cde);
            if (strcmp(cde, " inscription ") == 0) // C1
            {
            } // TODO
            else if (strcmp(cde, " absence ") == 0) // C2
            {
            } // TODO
            else if (strcmp(cde, " etudiants ") == 0) // C3
            {
            } // TODO
            else if (strcmp(cde, " justificatif ") == 0) // C4
            {
            } // TODO
            else if (strcmp(cde, " validations ") == 0) // C5
            {
            } // TODO
            else if (strcmp(cde, " validation ") == 0) // C6
            {
            } // TODO
            else if (strcmp(cde, " etudiant ") == 0) // C7
            {
            } // TODO
            else if (strcmp(cde, " defaillants ") == 0) // C8
            {
            } // TODO
        } while (strcmp(cde, " exit ") != 0); // C0
    }
